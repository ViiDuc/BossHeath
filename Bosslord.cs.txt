using System;
using System.IO;
using Newtonsoft.Json;
using TerrariaApi.Server;
using TShockAPI;
using Terraria;
using Terraria.ID;
using Microsoft.Xna.Framework;
using TShockAPI.Hooks;

namespace EyeOfCthulhuUpgrade
{
    [ApiVersion(2, 1)]
    public class EyeOfCthulhuUpgrade : TerrariaPlugin
    {
        public override string Name => "Eye of Cthulhu Upgrade";
        public override string Author => "Your Name";
        public override string Description => "Upgrade Eye of Cthulhu with special abilities";
        public override Version Version => new Version(1, 0, 0, 0);

        private Config config;
        private int minionType;
        private bool minionSpawned = false;

        public EyeOfCthulhuUpgrade(Main game) : base(game) { }

        public override void Initialize()
        {
            ServerApi.Hooks.GameInitialize.Register(this, OnGameInitialize);
            ServerApi.Hooks.NpcSpawn.Register(this, OnNpcSpawn);
            ServerApi.Hooks.NpcPostAI.Register(this, OnNpcPostAI);
            ServerApi.Hooks.NpcLoot.Register(this, OnNpcLoot);
            ServerApi.Hooks.NetGetData.Register(this, OnNetGetData);

            Commands.ChatCommands.Add(new Command("eye.config", ConfigCommand, "eye.config"));

            LoadConfig();
        }

        private void OnNpcSpawn(NpcSpawnEventArgs args)
        {
            if (args.NPC.type == NPCID.EyeofCthulhu)
            {
                minionSpawned = false;
                args.NPC.ai[0] = 0;
                args.NPC.ai[1] = 0; // Đặt biến ai[1] để theo dõi mưa sao băng
            }
        }

        private void OnGameInitialize(EventArgs args)
        {
            minionType = NPCID.Skeleton; // Minion loại Skeleton
        }

        private void OnNpcPostAI(NpcPostAIEventArgs args)
        {
            if (args.NPC.type == NPCID.EyeofCthulhu && Main.netMode == NetmodeID.Server)
            {
                if (!minionSpawned)
                {
                    minionType = NPC.NewNPC(args.NPC.GetSource_FromAI(), (int)args.NPC.Center.X, (int)args.NPC.Center.Y, NPCID.Skeleton);
                    if (minionType < 200)
                    {
                        Main.npc[minionType].velocity = args.NPC.DirectionTo(Main.player[args.NPC.target].Center) * 5f;
                        Main.npc[minionType].isCustomMinion = true;
                    }
                    minionSpawned = true;
                }

                // Khi máu giảm dưới 50%, triệu hồi mưa sao băng
                if (args.NPC.life <= args.NPC.lifeMax * 0.5 && args.NPC.ai[1] == 0f)
                {
                    args.NPC.ai[1] = 1f; // Đánh dấu đã kích hoạt sao băng
                    SummonStarRain(args.NPC);
                }

                // Khi máu giảm dưới 25%, Eye of Cthulhu biến thành mini nhưng nhanh hơn
                if (args.NPC.life <= args.NPC.lifeMax * 0.25 && !args.NPC.boss)
                {
                    args.NPC.scale = 0.5f; // Thu nhỏ Eye of Cthulhu
                    args.NPC.velocity *= 1.5f; // Tăng tốc độ di chuyển
                    args.NPC.boss = true; // Đánh dấu là boss để không tiêu diệt sớm
                    TSPlayer.All.SendWarningMessage("Eye of Cthulhu has transformed into its mini form!");
                }

                // Thả bom ngẫu nhiên trong khi di chuyển
                if (Main.rand.NextFloat() < 0.05f)
                {
                    DropRandomBomb(args.NPC);
                }

                // Khi tức giận, triệu hồi bầy quạ
                if (args.NPC.ai[0] >= 100)
                {
                    args.NPC.ai[0] = 0;
                    CreatePoisonMist(args.NPC);
                    SummonMeteors(args.NPC);
                    SummonCrowSwarm(args.NPC); // Triệu hồi bầy quạ
                }
                else
                {
                    args.NPC.ai[0]++;
                }
            }
        }

        // Mưa sao băng
        private void SummonStarRain(NPC npc)
        {
            TSPlayer.All.SendWarningMessage("A shower of stars descends!");
            for (int i = 0; i < 10; i++)
            {
                Vector2 position = npc.Center + new Vector2(Main.rand.Next(-300, 300), -1000);
                Vector2 velocity = new Vector2(0, 10);
                Projectile.NewProjectile(npc.GetSource_FromAI(), position, velocity, ProjectileID.FallingStar, 50, 1f);
            }
        }

        // Thả bom ngẫu nhiên
        private void DropRandomBomb(NPC npc)
        {
            Vector2 position = npc.Center + new Vector2(Main.rand.Next(-50, 50), Main.rand.Next(-50, 50));
            Projectile.NewProjectile(npc.GetSource_FromAI(), position, Vector2.Zero, ProjectileID.Bomb, 75, 2f);
        }

        // Triệu hồi bầy quạ
        private void SummonCrowSwarm(NPC npc)
        {
            for (int i = 0; i < 5; i++)
            {
                Vector2 position = npc.Center + new Vector2(Main.rand.Next(-300, 300), -100);
                NPC.NewNPC(npc.GetSource_FromAI(), (int)position.X, (int)position.Y, NPCID.Raven);
            }
            TSPlayer.All.SendWarningMessage("A swarm of crows has been summoned!");
        }

        // Hiệu ứng khói độc
        private void CreatePoisonMist(NPC npc)
        {
            for (int i = 0; i < 20; i++)
            {
                Vector2 position = npc.Center + new Vector2(Main.rand.Next(-200, 200), Main.rand.Next(-200, 200));
                int dustType = 46;
                Dust.NewDust(position, 20, 20, dustType);
            }

            foreach (var player in Main.player)
            {
                if (player.active && !player.dead && Vector2.Distance(player.Center, npc.Center) < 200)
                {
                    player.AddBuff(BuffID.Poisoned, 300); // Trúng độc
                }
            }
        }

        // Triệu hồi thiên thạch
        private void SummonMeteors(NPC npc)
        {
            for (int i = 0; i < 5; i++)
            {
                Vector2 position = npc.Center + new Vector2(Main.rand.Next(-300, 300), -1000);
                Vector2 velocity = new Vector2(Main.rand.NextFloat(-5f, 5f), 15f);
                int damage = (int)(50 * config.DamageMultiplier);
                Projectile.NewProjectile(npc.GetSource_FromAI(), position, velocity, ProjectileID.DD2BetsyFireball, damage, 2f);
            }
        }

        // Xử lý rơi đồ
        private void OnNpcLoot(NpcLootEventArgs args)
        {
            if (args.NPC.type == NPCID.EyeofCthulhu && Main.rand.NextFloat() < config.SpecialItemDropChance)
            {
                args.Loot.Add(ItemID.Starfury); // Thêm phần thưởng đặc biệt
            }
        }

        // Lệnh cấu hình
        private void ConfigCommand(CommandArgs args)
        {
            if (args.Parameters.Count > 0)
            {
                string option = args.Parameters[0].ToLower();

                switch (option)
                {
                    case "reload":
                        LoadConfig();
                        args.Player.SendSuccessMessage("Cấu hình đã được tải lại.");
                        break;
                    case "damage":
                        if (args.Parameters.Count > 1 && float.TryParse(args.Parameters[1], out float damageMultiplier))
                        {
                            config.DamageMultiplier = damageMultiplier;
                            SaveConfig();
                            args.Player.SendSuccessMessage($"Damage multiplier set to {damageMultiplier}");
                        }
                        else
                        {
                            args.Player.SendErrorMessage("Usage: /eye.config damage <multiplier>");
                        }
                        break;
                    default:
                        args.Player.SendErrorMessage("Invalid option. Usage: /eye.config <reload|damage>");
                        break;
                }
            }
            else
            {
                args.Player.SendErrorMessage("Usage: /eye.config <reload|damage>");
            }
        }

        // Đọc cấu hình từ file
        private void LoadConfig()
        {
            string configPath = Path.Combine(TShock.SavePath, "EyeOfCthulhuUpgrade.json");
            if (!File.Exists(configPath))
            {
                config = new Config();
                SaveConfig();
            }
            else
            {
                config = JsonConvert.DeserializeObject<Config>(File.ReadAllText(configPath));
            }
        }

        // Lưu cấu hình vào file
        private void SaveConfig()
        {
            string configPath = Path.Combine(TShock.SavePath, "EyeOfCthulhuUpgrade.json");
            File.WriteAllText(configPath, JsonConvert.SerializeObject(config, Formatting.Indented));
        }

        //
